name: Deploy Apache Superset to GCP VM

# =============================================================================
# GITHUB REPOSITORY SETUP REQUIRED
# =============================================================================
# 
# This workflow requires the following GitHub repository configuration:
#
# SECRETS (Settings > Secrets and variables > Actions > Secrets):
# - GCP_PROJECT_ID: Your Google Cloud Project ID
# - GCP_SA_KEY: Base64-encoded service account key JSON
# - GCP_VM_INSTANCE_NAME: Name of your GCP VM instance
# vars GCP_REGION_ZONE: GCP zone where VM is located (e.g., australia-southeast1-a)
# - GCP_REGION: GCP region (e.g., australia-southeast1)
# - AIRFLOW_ADMIN_USERNAME: Airflow admin username
# - AIRFLOW_ADMIN_PASSWORD: Airflow admin password
# - GH_TOKEN: GitHub token for submodule updates
#
# VARIABLES (Settings > Secrets and variables > Actions > Variables):
# - GCP_SSH_USER: SSH username for VM (e.g., gh-actions)
# - AIRFLOW_IMAGE_NAME: Docker image name for Airflow
#
# =============================================================================

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

jobs:
  setup-gcp-vm:
    runs-on: ubuntu-latest

    steps:
    - uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Check VM Status
      id: check-vm-status
      run: |
        VM_STATUS=$(gcloud compute instances describe ${{ vars.GCP_VM_INSTANCE_NAME }} \
          --zone=${{ vars.GCP_REGION_ZONE }} \
          --format="value(status)")
        echo "vm_status=$VM_STATUS" >> $GITHUB_OUTPUT
        echo "Current VM status: $VM_STATUS"

    - name: Start VM if stopped
      if: steps.check-vm-status.outputs.vm_status == 'TERMINATED'
      run: |
        echo "Starting VM..."
        gcloud compute instances start ${{ vars.GCP_VM_INSTANCE_NAME }} \
          --zone=${{ vars.GCP_REGION_ZONE }}
        
        echo "Waiting for VM to be ready..."
        # Wait for the instance to be running
        for i in {1..30}; do
          VM_STATUS=$(gcloud compute instances describe ${{ vars.GCP_VM_INSTANCE_NAME }} \
            --zone=${{ vars.GCP_REGION_ZONE }} \
            --format="value(status)")
          if [[ "$VM_STATUS" == "RUNNING" ]]; then
            echo "VM is now running"
            break
          fi
          echo "Waiting for VM to be running... attempt $i (status: $VM_STATUS)"
          sleep 10
        done
        
        echo "Waiting for VM to be fully initialized..."
        sleep 30

  deploy-superset:
    runs-on: ubuntu-latest
    needs: setup-gcp-vm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install dependencies
      run: |
        uv sync --locked

    - name: Install Ansible Collections
      run: |
        make install-collections

    - name: Generate SSH Key Pair
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/at-bus-superset-key -N "" -C "github-actions@deployment"
        chmod 600 ~/.ssh/at-bus-superset-key
        chmod 644 ~/.ssh/at-bus-superset-key.pub
        echo "SSH key pair generated successfully"

    - name: Get VM IP
      id: get-vm-ip
      run: |
        VM_IP=$(gcloud compute instances describe ${{ vars.GCP_VM_INSTANCE_NAME }} \
          --zone=${{ vars.GCP_REGION_ZONE }} \
          --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "VM IP: $VM_IP"

    - name: Add SSH Key to VM
      run: |
        gcloud compute instances add-metadata ${{ vars.GCP_VM_INSTANCE_NAME }} \
          --zone=${{ vars.GCP_REGION_ZONE }} \
          --metadata ssh-keys="${{ vars.GCP_SSH_USER }}:$(cat ~/.ssh/at-bus-superset-key.pub)"

    - name: Wait for SSH to be ready
      run: |
        echo "Testing SSH connection with generated key..."
        echo "SSH key location: ~/.ssh/at-bus-superset-key"
        echo "SSH key permissions: $(ls -la ~/.ssh/at-bus-superset-key)"
        echo "SSH public key:"
        cat ~/.ssh/at-bus-superset-key.pub
        
        for i in {1..30}; do
          echo "Attempt $i: Testing SSH connection to ${{ vars.GCP_SSH_USER }}@${{ steps.get-vm-ip.outputs.vm_ip }}"
          if ssh -i ~/.ssh/at-bus-superset-key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null \
             ${{ vars.GCP_SSH_USER }}@${{ steps.get-vm-ip.outputs.vm_ip }} "echo 'SSH ready'"; then
            echo "SSH connection established on attempt $i"
            break
          fi
          echo "SSH connection failed on attempt $i"
          if [ $i -eq 30 ]; then
            echo "Failed to establish SSH connection after 30 attempts"
            echo "Checking VM status..."
            gcloud compute instances describe ${{ vars.GCP_VM_INSTANCE_NAME }} --zone=${{ vars.GCP_REGION_ZONE }}
            exit 1
          fi
          sleep 10
        done

    - name: Update Ansible Inventory
      run: |
        # Update the production inventory with the current VM IP
        cat > inventory/hosts.yml << EOF
        ---
        all:
          children:
            superset_servers:
              hosts:
                superset-server:
                  ansible_host: ${{ steps.get-vm-ip.outputs.vm_ip }}
                  ansible_user: ${{ vars.GCP_SSH_USER }}
                  ansible_ssh_private_key_file: ~/.ssh/at-bus-superset-key
        EOF

    - name: Create vault password file
      run: |
        echo "${{ secrets.VAULT_PASSWORD }}" > /home/runner/.vault_pass
        echo "Vault password file created at /home/runner/.vault_pass"

    - name: Run Ansible Playbook Syntax Check
      run: |
        uv run ansible-playbook --syntax-check -i inventory/hosts.yml playbooks/deploy.yml --vault-password-file /home/runner/.vault_pass
        uv run ansible-playbook --syntax-check -i inventory/hosts.yml playbooks/backup.yml --vault-password-file /home/runner/.vault_pass
        uv run ansible-playbook --syntax-check -i inventory/hosts.yml playbooks/restore.yml --vault-password-file /home/runner/.vault_pass
        uv run ansible-playbook --syntax-check -i inventory/hosts.yml playbooks/update.yml --vault-password-file /home/runner/.vault_pass

    - name: Deploy Superset with Ansible
      run: |
        uv run ansible-playbook -i inventory/hosts.yml playbooks/deploy.yml --vault-password-file /home/runner/.vault_pass --verbose

    - name: Verify Deployment
      run: |
        ssh -i ~/.ssh/at-bus-superset-key -o StrictHostKeyChecking=no \
          ${{ vars.GCP_SSH_USER }}@${{ steps.get-vm-ip.outputs.vm_ip }} \
          "cd /opt/superset && docker compose ps"

    - name: Cleanup SSH Key
      if: always()
      run: |
        gcloud compute instances remove-metadata ${{ vars.GCP_VM_INSTANCE_NAME }} \
          --zone=${{ vars.GCP_REGION_ZONE }} \
          --keys ssh-keys

    - name: Deployment Summary
      run: |
        echo "üöÄ Superset deployment completed!"
        echo "üåê Web UI: http://${{ steps.get-vm-ip.outputs.vm_ip }}:8088"